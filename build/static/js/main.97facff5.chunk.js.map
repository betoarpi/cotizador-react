{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","helper.js","componentes/Resumen.js","componentes/Resultado.js","componentes/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","marcaRef","React","createRef","yearRef","planBasicoRef","planCompletoRef","cotizarSeguro","e","preventDefault","plan","_this","current","checked","infoAuto","marca","value","year","onSubmit","this","bind","name","ref","type","Component","primeraMayuscula","texto","charAt","toUpperCase","slice","Resumen","mostrarResumen","_this$props$datos","datos","Resultado","resultado","mensaje","TransitionGroup","component","CSSTransition","classNames","key","timeout","enter","exit","App","state","Date","getFullYear","obtenerDiferenciaAnio","modelo","incremento","calcularMarca","incrementoPlan","obtenerPlan","parseFloat","toFixed","datosAuto","setState","componentes_Header","componentes_Formulario","componentes_Resumen","componentes_Resultado","Boolean","window","location","hostname","match","ReactDOM","render","componentes_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97facff5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = props => {\r\n  return (\r\n    <header className=\"top\">\r\n      <h1>{props.titulo}</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\n\r\nclass Formulario extends Component {\r\n  \r\n  //refs son para leer los valores de los campos de un formulario\r\n  marcaRef = React.createRef();\r\n  yearRef = React.createRef();\r\n  planBasicoRef = React.createRef();\r\n  planCompletoRef = React.createRef();\r\n\r\n  //Los refs también se pueden crear con un constructor,\r\n  //pero esto añade un poco más de código a nuestra app\r\n  /* constructor(props){\r\n    super(props);\r\n    this.marcaRef = React.createRef();\r\n    this.yearRef = React.createRef();\r\n    this.planBasicoRef = React.createRef();\r\n    this.planCompletoRef = React.createRef();\r\n  } */\r\n\r\n  cotizarSeguro = (e) => {\r\n    e.preventDefault();\r\n    \r\n    //leer plan \r\n    const plan = this.planBasicoRef.current.checked ? 'basico' : 'completo';\r\n    \r\n    // obtener los datos\r\n\r\n    //crear el objeto\r\n    const infoAuto = {\r\n      marca: this.marcaRef.current.value,\r\n      year: this.yearRef.current.value,\r\n      plan: plan\r\n    }\r\n    //console.log(infoAuto);\r\n\r\n    //enviarlo al componente principal\r\n    this.props.cotizarSeguro(infoAuto);\r\n\r\n    //resetear el formulario (opcional)\r\n    //e.currentTarget.reset();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"cotizar-auto\" onSubmit={this.cotizarSeguro.bind(this)}>\r\n        <div className=\"campo\">\r\n          <label>Marca</label>\r\n          <select name=\"marca\" ref={this.marcaRef}>\r\n            <option value=\"americano\">Americano</option>\r\n            <option value=\"europeo\">Europeo</option>\r\n            <option value=\"asiatico\">Asiatico</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"campo\">\r\n          <label>Año</label>\r\n          <select name=\"year\" ref={this.yearRef}>\r\n            <option value=\"2019\">2019</option>\r\n            <option value=\"2018\">2018</option>\r\n            <option value=\"2017\">2017</option>\r\n            <option value=\"2016\">2016</option>\r\n            <option value=\"2015\">2015</option>\r\n            <option value=\"2014\">2014</option>\r\n            <option value=\"2013\">2013</option>\r\n            <option value=\"2012\">2012</option>\r\n            <option value=\"2011\">2011</option>\r\n            <option value=\"2010\">2010</option>\r\n            <option value=\"2009\">2009</option>\r\n            <option value=\"2008\">2008</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div className=\"campo\">\r\n          <label>Plan:</label>\r\n          <input type=\"radio\" name=\"plan\" value=\"basico\" ref={this.planBasicoRef} /> Básico\r\n          <input type=\"radio\" name=\"plan\" value=\"completo\"ref={this.planCompletoRef} /> Completo\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"boton\">Cotizar</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Formulario;","export function obtenerDiferenciaAnio(year) {\r\n  return new Date().getFullYear() - year;\r\n}\r\n\r\nexport function calcularMarca(modelo) {\r\n  let incremento;\r\n\r\n  switch (modelo) {\r\n    case 'europeo':\r\n      incremento = 1.30;\r\n      break;\r\n    case 'americano':\r\n      incremento = 1.15;\r\n      break;\r\n    case 'asiatico':\r\n      incremento = 1.05;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return incremento;\r\n}\r\nexport function obtenerPlan(plan) {\r\n  return (plan === 'basico') ? 1.20 : 1.50;\r\n}\r\nexport function primeraMayuscula(texto) {\r\n  return texto.charAt(0).toUpperCase() + texto.slice(1);\r\n}","import React, {Component} from 'react';\r\nimport {primeraMayuscula} from '../helper';\r\n\r\nclass Resumen extends Component {\r\n  mostrarResumen = () => {\r\n    const {marca, year, plan} = this.props.datos;\r\n\r\n    if(!marca || !year || !plan ) return null;\r\n\r\n    return (\r\n      <div className=\"resumen\">\r\n        <h2>Resumen de Cotización</h2>\r\n        <li>Marca: {primeraMayuscula(marca)}</li>\r\n        <li>Plan: {primeraMayuscula(plan)}</li>\r\n        <li>Año del Auto: {year}</li>\r\n      </div>\r\n    )\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n        {this.mostrarResumen()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Resumen;","import React, {Component} from 'react';\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\r\n\r\nclass Resultado extends Component {\r\n  render(){\r\n    const resultado = this.props.resultado;\r\n    const mensaje = (!resultado) ? 'Elije una Marca, el año y el tipo de cobertura' : 'El costo total es de $ ';\r\n    return (\r\n      <div className=\"gran-total\">\r\n        {mensaje}\r\n        <TransitionGroup component=\"span\" className=\"resultado\">\r\n          <CSSTransition\r\n            classNames=\"resultado\"\r\n            key={resultado}\r\n            timeout={{enter: 500, exit: 500}}>\r\n            <span>{resultado}</span>\r\n          </CSSTransition>\r\n        </TransitionGroup>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Resultado;","import React, {Component} from 'react';\nimport Header from './Header';\nimport Formulario from './Formulario';\nimport {obtenerDiferenciaAnio, calcularMarca, obtenerPlan} from '../helper.js';\nimport Resumen from './Resumen';\nimport Resultado from './Resultado';\n\nclass App extends Component {\n  state = {\n    resultado : '',\n    datos : {},\n  }\n  cotizarSeguro = (datos) => {\n    const {marca, year, plan} = datos;\n    //Agregar una base\n    let resultado = 2000;\n    //Obtener la diferencia de años\n    const diferenciaAnio = obtenerDiferenciaAnio(year);\n    //Por cada año restarle el 3% al valor del seguro\n    resultado -= ((diferenciaAnio * 3) * resultado) / 100;\n    // Americano 15%, Asiático 5% y Europeo 30% de incremento al valor\n    resultado = calcularMarca(marca) * resultado;\n    // el plan básico aumenta la tarifa en un 20%, y el completo en un 50%\n    let incrementoPlan = obtenerPlan(plan);\n    // dependiendo del plan, incrementar\n    resultado = parseFloat(incrementoPlan * resultado).toFixed(2);\n    //crear objeto para el resumen\n    const datosAuto = {\n      marca : marca,\n      plan : plan,\n      year: year\n    }\n    //ya tenemos el costo\n    this.setState({\n      resultado : resultado,\n      datos : datosAuto\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"contenedor\">\n        <Header\n          titulo = \"Cotizador de Seguro de Auto\"\n        />\n  \n        <div className=\"contenedor-formulario\">\n          <Formulario\n            cotizarSeguro={this.cotizarSeguro}\n          />\n          <Resumen\n            datos={this.state.datos}\n            resultado={this.state.resultado}\n          />\n          <Resultado\n          resultado={this.state.resultado}\n          />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './componentes/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}